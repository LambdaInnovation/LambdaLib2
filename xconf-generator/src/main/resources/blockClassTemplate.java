package $config.blocksPackageName;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;

import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fml.common.FMLCommonHandler;
import net.minecraftforge.fml.relauncher.SideOnly;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.client.model.ModelLoader;

import cn.lambdalib2.registry.RegistryCallback;
import cn.lambdalib2.registry.StateEventCallback;

#foreach ($import in $config.additionalImports.all)
import $import;
#end
#foreach ($import in $config.additionalImports.block)
import $import;
#end

/**
 * Automatically generated by LambdaLib2.xconf in $date.
 */
public class $config.blocksClassName {

#foreach ($block in $blocks)
    public static final $block.baseClass $block.id = new ${block.baseClass}($block.ctorArgs);
#end

#foreach ($block in $blocksWithItemBlock)
    public static final ItemBlock item_$block.id = new ItemBlock($block.id);
#end

    @RegistryCallback
    private static void registerBlocks(RegistryEvent.Register<Block> event) {
    #foreach ($block in $blocks)
        #set($id = $block.id)
        ${id}.setRegistryName("$config.domain:$id");
        ${id}.setTranslationKey("${config.locPrefix}$id");
    #if($block.creativeTab)
        ${id}.setCreativeTab($block.creativeTab);
    #end
    #if($block.init)
    #foreach($stmt in $block.init)
        ${id}.$stmt;
    #end
    #end
        event.getRegistry().register($id);
    #end
    }

    @RegistryCallback
    @SuppressWarnings("sideonly")
    private static void registerItems(RegistryEvent.Register<Item> event) {
    #foreach ($block in $blocksWithItemBlock)
        #set($id = "item_$block.id")
        ${id}.setRegistryName("$config.domain:$block.id");
        ${id}.setTranslationKey("${config.locPrefix}$block.id");
        event.getRegistry().register($id);
    #end

        if (FMLCommonHandler.instance().getSide() == Side.CLIENT) {
            registerItemRenderers();
        }
    }

    @SideOnly(Side.CLIENT)
    private static void registerItemRenderers() {
    #foreach ($block in $blocksWithItemBlock)
        ModelLoader.setCustomModelResourceLocation(item_${block.id}, 0, new ModelResourceLocation(${block.id}.getRegistryName(), "inventory"));
    #end
    }

}